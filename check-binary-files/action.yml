name: 'Check Binary Files'
description: 'A GitHub Action to check for binary files in commits'
inputs:
  base-ref:
    description: 'The base reference to compare with'
    required: true
  head-ref:
    description: 'The head reference to compare with'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Run check-binary-files script
      shell: bash
      env:
        BASE: ${{ inputs.base-ref }}
        HEAD: ${{ inputs.head-ref }}
      run: |
        ##########################################
        ## ADVANCED USAGE                       ##
        ## Scan by BASE & HEAD user inputs      ##
        ## If BASE == HEAD, exit with error     ##
        ##########################################
        git status >/dev/null  # make sure we are in a git repository
        if [ -n "$BASE" ] || [ -n "$HEAD" ]; then
          if [ -n "$BASE" ]; then
            base_commit=$(git rev-parse "$BASE" 2>/dev/null) || true
          else
            base_commit=""
          fi
          if [ -n "$HEAD" ]; then
            head_commit=$(git rev-parse "$HEAD" 2>/dev/null) || true
          else
            head_commit=""
          fi
          if [ "$base_commit" == "$head_commit" ] ; then
            echo "::error::BASE and HEAD commits are the same."
            exit 1
          fi
        ##########################################
        ## Scan commits based on event type     ##
        ##########################################
        else
          if [ "${{ github.event_name }}" == "push" ]; then
            COMMIT_LENGTH=$(printenv COMMITS | jq length)
            if [ $COMMIT_LENGTH == "0" ]; then
              echo "No commits to scan"
              exit 0
            fi
            HEAD=${{ github.event.after }}
            if [ ${{ github.event.before }} == "0000000000000000000000000000000000000000" ]; then
              BASE=$(git rev-parse $HEAD~$COMMIT_LENGTH)
            else
              BASE=${{ github.event.before }}
            fi
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ] || [ "${{ github.event_name }}" == "schedule" ]; then
            BASE=""
            HEAD=""
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE=${{github.event.pull_request.base.sha}}
            HEAD=${{github.event.pull_request.head.sha}}
          fi
        fi

        # Get the list of commits in the push
        commits=$(git rev-list "$BASE" ^"$HEAD")

        # Check each commit for binary files
        for commit in $commits; do
          files=$(git diff-tree --no-commit-id --name-only --diff-filter=AM -r $commit)
          
          if [ -n "$files" ]; then
            for file in $files; do
              if file "$file" | grep -q 'ELF\|PE32\|Mach-O'; then
                binary_files="$binary_files$file (in commit $commit)\n"
              fi
            done
          else
            echo "No files detected in commit $commit"
            exit 1
          fi
        done

        # Set the output variable if binary files were detected
        if [ -n "$binary_files" ]; then
          echo "Binary files detected:"
          echo -e "$binary_files"
          echo "::set-output name=binary_files::$binary_files"
          exit 1
        else
          echo "No binary files detected."
        fi
